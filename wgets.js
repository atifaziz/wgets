// Generated by LiveScript 1.3.1
(function(){
  var about, ref$, stdin, stdout, stderr, writeln, write, echo, alert, ADO, Path, HTTP, ProgramArgumentError, getFileNameFromURL, main, slice$ = [].slice;
  about = 'WGETS 1.2.1 - A non-interactive web retriever script.\nCopyright (c) Atif Aziz. All rights reserved.\n\nWritten by Atif Aziz, http://www.raboof.com/\n\nCreative Commons Attribution-ShareAlike 3.0 Unported License.\n http://creativecommons.org/licenses/by-sa/3.0/';
  ref$ = [WScript.StdIn, WScript.StdOut, WScript.StdErr], stdin = ref$[0], stdout = ref$[1], stderr = ref$[2];
  writeln = function(s, w){
    w == null && (w = stdout);
    return w.WriteLine(s);
  };
  write = function(s, w){
    w == null && (w = stdout);
    return w.Write(s);
  };
  echo = function(s){
    return WScript.Echo(s);
  };
  alert = echo;
  ADO = {
    SaveOptionsEnum: {
      adSaveCreateNotExist: 1,
      adSaveCreateOverWrite: 2
    },
    StreamTypeEnum: {
      adTypeBinary: 1,
      adTypeText: 2
    }
  };
  Path = {
    combine: function(path1, path2){
      var sb;
      path1 == null && (path1 = '');
      path2 == null && (path2 = '');
      sb = [];
      sb.push(path1);
      if ('\\' !== path1.slice(-1)) {
        sb.push('\\');
      }
      sb.push(path2.indexOf('\\') === 0 ? path2.substring(1) : path2);
      return sb.join('');
    }
  };
  HTTP = {
    getResponseHeaders: function(http){
      var headersText, parser, headers, mtch, ref$, name, value;
      headersText = http.getAllResponseHeaders();
      parser = /^([^\:\r]+)\:\s*(.+)$/gm;
      headers = {};
      while (mtch = parser.exec(headersText)) {
        ref$ = [mtch[1].trim().toLowerCase(), mtch[2].trim()], name = ref$[0], value = ref$[1];
        headers[name] = value;
      }
      return headers;
    }
  };
  String.prototype.trim = function(){
    return this.replace(/^\s+|\s+$/g, '');
  };
  String.prototype.clipLeft = function(width, decoration){
    decoration == null && (decoration = '...');
    if (this.length <= width) {
      return this;
    } else {
      return decoration + slice$.call(this, -width);
    }
  };
  ProgramArgumentError = (function(superclass){
    var prototype = extend$((import$(ProgramArgumentError, superclass).displayName = 'ProgramArgumentError', ProgramArgumentError), superclass).prototype, constructor = ProgramArgumentError;
    function ProgramArgumentError(message){
      this.message = message != null ? message : 'Error with program argument.';
      ProgramArgumentError.superclass.call(this, this.message += ' Use the /? for help.');
    }
    return ProgramArgumentError;
  }(Error));
  getFileNameFromURL = function(url, defaultFileName){
    var qIndex, path, lastSlashIndex, result;
    qIndex = url.indexOf('?');
    path = qIndex >= 0 ? url.substring(0, qIndex) : url;
    lastSlashIndex = path.lastIndexOf('/');
    result = path.substring(lastSlashIndex + 1);
    if (result.length > 0) {
      return result;
    } else {
      return defaultFileName;
    }
  };
  main = function(args){
    var logo, url, useStandardOutput, httpStatusOnly, httpHeadersOnly, dontOutputEntity, outputFileName, http, method, httpStatus, contentLength, outputDirectory, outputPath, ref$, x$;
    logo = args.isFlagged('logo');
    if (logo) {
      writeln(about, stderr);
    }
    if (args.unnamed.length === 0) {
      if (logo) {
        return;
      }
      throw new ProgramArgumentError('Missing URL.');
    }
    url = args.unnamed[0];
    useStandardOutput = false;
    httpStatusOnly = args.isFlagged('status');
    httpHeadersOnly = args.isFlagged('headers');
    dontOutputEntity = httpStatusOnly || httpHeadersOnly;
    if (!dontOutputEntity) {
      if (args.unnamed.length > 1) {
        outputFileName = args.unnamed[1];
        useStandardOutput = outputFileName === '-';
      } else {
        outputFileName = getFileNameFromURL(url, '');
        if (outputFileName.length === 0) {
          throw new Error('Unable to guess the output file name from the URL.');
        }
      }
    }
    http = new ActiveXObject('Microsoft.XMLHTTP');
    method = dontOutputEntity ? 'HEAD' : 'GET';
    http.open(method, url, false);
    http.send();
    httpStatus = http.status + " " + http.statusText;
    if (httpStatusOnly) {
      writeln(httpStatus);
    }
    if (httpHeadersOnly) {
      write(http.getAllResponseHeaders());
    }
    if (dontOutputEntity) {
      return;
    }
    contentLength = parseInt(
    String(
    http.getResponseHeader('Content-Length')));
    outputDirectory = args.getNamed('od') || '';
    outputPath = outputDirectory.length > 0 ? Path.combine(outputDirectory, outputFileName) : outputFileName;
    if (!(200 <= (ref$ = http.status) && ref$ < 300)) {
      throw new Error(httpStatus);
    }
    if (useStandardOutput) {
      write(http.responseText);
    } else {
      x$ = new ActiveXObject('ADODB.Stream');
      x$.Type = ADO.StreamTypeEnum.adTypeBinary;
      x$.Open();
      x$.Write(http.responseBody);
      x$.SaveToFile(outputPath, ADO.SaveOptionsEnum.adSaveCreateOverWrite);
      write("Saved " + url.clipLeft(30) + " to " + outputPath);
      if (contentLength >= 0) {
        write(" [" + contentLength + " byte(s)]");
      }
      writeln('.');
    }
  };
  (function(){
    var wshargs, args, res$, i$, to$, i, e;
    try {
      wshargs = WScript.Arguments;
      res$ = [];
      for (i$ = 0, to$ = wshargs.length; i$ < to$; ++i$) {
        i = i$;
        res$.push(wshargs.item(i));
      }
      args = res$;
      res$ = [];
      for (i$ = 0, to$ = wshargs.Unnamed.Count; i$ < to$; ++i$) {
        i = i$;
        res$.push(wshargs.Unnamed.Item(i));
      }
      args.unnamed = res$;
      args.getNamed = function(it){
        return WScript.Arguments.Named.Item(it);
      };
      args.isFlagged = function(it){
        return WScript.Arguments.Named.Exists(it);
      };
      return main(args);
    } catch (e$) {
      e = e$;
      writeln(!e.message
        ? e.toString()
        : e.message, stderr);
      return WScript.Quit(-1);
    }
  })();
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
